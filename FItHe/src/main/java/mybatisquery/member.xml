<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fithe.member.dao.MemberDAO">
	
	<resultMap type="com.fithe.member.vo.MemberVO" id="memberVO">
		<!-- 회원테이블의 컬럼과 변수 -->
		<result column="MNUM" 			 property="mnum"	 		/>
		<result column="MID" 			 property="mid" 			/>
		<result column="MPW" 			 property="mpw" 			/>
		<result column="MNAME" 			 property="mname" 			/>
		<result column="MGENDER" 		 property="mgender"			/>
		<result column="MBIR" 			 property="mbir" 			/>
		<result column="MZONECODE" 		 property="mzonecode" 		/>
		<result column="MADDRESS" 	 	 property="maddress"		/>
		<result column="MADDRESS_DETAIL" property="maddress_detail"	/>
		<result column="MPH" 			 property="mph"				/>
		<result column="MEMAIL" 		 property="memail"			/>
		<result column="MINSERTDATE" 	 property="minsertdate"		/>
		<result column="MUPDATEDATE" 	 property="mupdatedate"		/>
		<result column="MDELYN" 		 property="mdelyn"			/>
		<result column="MAUTH" 			 property="mauth"			/>
		<!-- 인증번호 관련 테이블 컬럼과 변수 -->
		<result column="ANUM" 			 property="anum"			/>
		<result column="ANAME" 			 property="aname"			/>
		<result column="AEMAIL" 		 property="aemail"			/>
		<result column="AUTHNUM" 		 property="authnum"			/>
		<result column="AINSERTDATE"	 property="ainsertdate"		/>
	</resultMap>
	
	
	<!-- 회원 선택 조회 -->
	<select id="memberSelect" parameterType="com.fithe.member.vo.MemberVO"
			resultMap="memberVO">
		SELECT	*
		FROM 	FIT_MEMBER
		WHERE 	MID = #{mid, jdbcType=VARCHAR}
			AND MDELYN = 'Y'
	
	</select>
	
	<!-- 회원등록 -->
	<insert id="memberInsert" parameterType="com.fithe.member.vo.MemberVO">
		INSERT INTO FIT_MEMBER(
			MNUM,
			MID,
			MPW,
			MNAME,
			MGENDER,
			MBIR,
			MZONECODE,
			MADDRESS,
			MADDRESS_DETAIL,
			MPH,
			MEMAIL,
			MINSERTDATE,
			MUPDATEDATE,
			MDELYN,
			MAUTH )
		VALUES(
			#{mnum, jdbcType=VARCHAR},
			#{mid, jdbcType=VARCHAR},
			#{mpw, jdbcType=VARCHAR},
			#{mname, jdbcType=VARCHAR},
			#{mgender, jdbcType=VARCHAR},
			#{mbir, jdbcType=VARCHAR},
			#{mzonecode, jdbcType=VARCHAR},
			#{maddress, jdbcType=VARCHAR},
			#{maddress_detail, jdbcType=VARCHAR},
			#{mph, jdbcType=VARCHAR},
			#{memail, jdbcType=VARCHAR},
			SYSDATE,
			SYSDATE,
			'Y',
			'A'
		)
	</insert>
	
	<!-- 회원정보 수정 -->
	<update id="memberUpdate" parameterType="com.fithe.member.vo.MemberVO">
		UPDATE	FIT_MEMBER
		SET		MUPDATEDATE = SYSDATE	
		<if test="mzonecode != '' and mzonecode != null">
				,MZONECODE = #{mzonecode, jdbcType=VARCHAR}
		</if>
		<if test="maddress != '' and maddress != null">
				,MADDRESS = #{maddress, jdbcType=VARCHAR}
		</if>
		<if test="maddress_detail != '' and maddress_detail != null">
				,MADDRESS_DETAIL = #{maddress_detail, jdbcType=VARCHAR}
		</if>
		<if test="mph != '' and mph != null">
				,MPH = #{mph, jdbcType=VARCHAR}
		</if>
		<if test="memail != '' and memail != null">
				,MEMAIL = #{memail, jdbcType=VARCHAR}
		</if>
		WHERE	MID = #{mid, jdbcType=VARCHAR}
			AND MDELYN = 'Y'
	</update>
	
	
	<!-- id 중복 체크 -->
	<select id="memberIdCheck" parameterType="com.fithe.member.vo.MemberVO" resultType="int">
		SELECT 	COUNT(*)
		FROM 	FIT_MEMBER
		WHERE 	MID = #{mid, jdbcType=VARCHAR}
			AND MDELYN = 'Y'
		<!-- 삭제된 아이디도 중복되면 안된다. -->
	</select>
	
	
	<!-- 로그인 처리 -->
	<select id="memberLogin" parameterType="com.fithe.member.vo.MemberVO" resultMap="memberVO">
		SELECT	*
		FROM	FIT_MEMBER
		WHERE	MID = #{mid, jdbcType=VARCHAR}
			AND	MDELYN = 'Y'
	</select>
	
	
	<!-- 인증번호 테이블에 입력된 정보들 insert -->
	<insert id="authInsert" parameterType="com.fithe.member.vo.MemberVO">
		INSERT INTO FIT_AUTH(
			ANUM,
			ANAME,
			AEMAIL,
			AUTHNUM,
			AINSERTDATE)
		VALUES(
			#{anum, jdbcType=VARCHAR},
			#{aname, jdbcType=VARCHAR},
			#{aemail, jdbcType=VARCHAR},
			#{authnum, jdbcType=VARCHAR},
			TO_CHAR(SYSDATE, 'YYYYMMDD')
		)	
	</insert>
	
	<!-- 인증번호 선택시 해당되는 리스트 반환 -->
	<!-- 인증번호의 유효기간(?)을 주기위해 해당 날짜에 발행된 인증번호만 사용 -->
	<!-- 추후 필요없는 쿼리 결과물은 제거 가능 -->
	<select id="authCheck" parameterType="com.fithe.member.vo.MemberVO" resultMap="memberVO">
		SELECT	M.MNUM				AS MNUM,
				M.MID				AS MID,
				M.MPW				AS MPW,
				M.MNAME				AS MNAME,
				M.MGENDER			AS MGENDER,
				M.MBIR				AS MBIR,
				M.MZONECODE			AS MZONECODE,
				M.MADDRESS			AS MADDRESS,
				M.MADDRESS_DETAIL	AS MADDRESS_DETAIL,
				M.MPH				AS MPH,
				M.MEMAIL			AS MEMAIL,
				M.MINSERTDATE		AS MINSERTDATE,
				M.MUPDATEDATE		AS MUPDATEDATE,
				M.MDELYN			AS MDELYN,
				M.MAUTH				AS MAUTH 
		FROM 	FIT_MEMBER M, (
			SELECT	ANAME, AEMAIL
			FROM	FIT_AUTH
			WHERE	AUTHNUM = #{authnum, jdbcType=VARCHAR}
				AND	AINSERTDATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
		) A
		WHERE	M.MNAME = A.ANAME		<!-- A.ANAME  이게 인증번호를 부여받은 이름 -->
			AND	M.MEMAIL = A.AEMAIL		<!-- A.AEMAIL 이게 인증번호를 부여받은 이메일 -->
			AND M.MDELYN = 'Y'
		<!-- 인증번호 테이블에서 가져온 이름과 이메일이 
			  회원 DB에 존재하는 이름과 이메일이 일치하면 해당 정보를 반환한다. -->
	</select>
	
	<!-- 패스워드를 업데이트 하는 쿼리 -->
	<update id="pwUpdate" parameterType="com.fithe.member.vo.MemberVO">
		UPDATE	FIT_MEMBER
		SET		MPW = #{mpw, jdbcType=VARCHAR},
				MUPDATEDATE = SYSDATE
		WHERE	MID = #{mid, jdbcType=VARCHAR}
			AND MDELYN = 'Y'
	</update>
	
	
	
	
	
	
	
	
	
	
<!-- ############################# 관리자 동작 ############################## -->	
	<!-- 멤버 조회(관리자) -->
	<select id="memberList" parameterType="com.fithe.member.vo.MemberVO"
			resultMap="memberVO">
		SELECT	MNUM, MID, MNAME, MDELYN,
				TO_CHAR(MINSERTDATE,'YYYY-MM-DD HH24:MI:SS') AS MINSERTDATE
		FROM (
				SELECT LIST.*, ROWNUM AS RNUM
				FROM (
						SELECT	MNUM, MID, MNAME, MINSERTDATE, MDELYN
						FROM FIT_MEMBER
						<trim prefix="WHERE" prefixOverrides="AND">
							<if test="search == 'mid'">
								<![CDATA[mid LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%']]>
							</if>
							<if test="search == 'mname'">
								<![CDATA[mname LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%']]>
							</if>
						</trim>
						<choose>
							<when test="order_by=='mnum'">
								ORDER BY MNUM
							</when>
							<when test="order_by=='minsertdate'">
								ORDER BY MINSERTDATE
							</when>
						</choose>
						<choose>
							<when test="order_sc=='ASC'">
								ASC
							</when>
							<when test="order_sc=='DESC'">
								DESC
							</when>
						</choose>
					) LIST
			)
		<where>
			<if test="start_row != null and start_row !='' ">
				<if test="end_row != null and end_row !='' ">
					RNUM BETWEEN #{start_row} AND #{end_row}
				</if>
			</if>
		</where>
	</select>
	
	<!-- 회원 전체 수 조회  -->
	<select id="memberCount" parameterType="com.fithe.member.vo.MemberVO" resultType="int">
		SELECT 	COUNT(MNUM)
		FROM 	FIT_MEMBER		
	</select>
	
	<!-- 관리자가 탈퇴 시킬때 -->
	<!-- 회원 탈퇴 -->
	<update id="memberDelete" parameterType="com.fithe.member.vo.MemberVO">
		UPDATE	FIT_MEMBER
		SET		MDELYN = 'N'
		WHERE	MID = #{mid, jdbcType=VARCHAR}
			AND MDELYN = 'Y'
	</update>
</mapper>